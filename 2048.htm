<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>消消乐游戏</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .game-cell {
            width: 50px;
            height: 50px;
            font-size: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        .game-cell:hover {
            transform: scale(1.1);
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">消消乐游戏</h1>
        <div class="row justify-content-center">
            <div class="col-auto">
                <div id="game-board" class="border border-dark p-2"></div>
            </div>
        </div>
        <div class="row justify-content-center mt-3">
            <div class="col-auto">
                <button id="new-game" class="btn btn-primary">新游戏</button>
            </div>
        </div>
        <div class="row justify-content-center mt-3">
            <div class="col-auto">
                <h3>分数: <span id="score">0</span></h3>
            </div>
        </div>
    </div>

    <script>
        const boardSize = 8;
        const colors = ['🔴', '🔵', '🟢', '🟡', '🟣'];
        let board = [];
        let score = 0;

        function createBoard() {
            const gameBoard = document.getElementById('game-board');
            gameBoard.innerHTML = '';
            board = [];

            for (let i = 0; i < boardSize; i++) {
                const row = [];
                const rowElement = document.createElement('div');
                rowElement.className = 'd-flex';

                for (let j = 0; j < boardSize; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'game-cell border border-dark m-1';
                    const color = colors[Math.floor(Math.random() * colors.length)];
                    cell.textContent = color;
                    cell.addEventListener('click', () => handleClick(i, j));
                    rowElement.appendChild(cell);
                    row.push(color);
                }

                gameBoard.appendChild(rowElement);
                board.push(row);
            }
        }

        function handleClick(row, col) {
            const color = board[row][col];
            const matches = findMatches(row, col, color);

            if (matches.length >= 3) {
                removeMatches(matches);
                updateScore(matches.length);
                fillEmptyCells();
            }
        }

        function findMatches(row, col, color, matches = []) {
            if (row < 0 || row >= boardSize || col < 0 || col >= boardSize || board[row][col] !== color) {
                return matches;
            }

            matches.push([row, col]);
            board[row][col] = null;

            findMatches(row - 1, col, color, matches);
            findMatches(row + 1, col, color, matches);
            findMatches(row, col - 1, color, matches);
            findMatches(row, col + 1, color, matches);

            return matches;
        }

        function removeMatches(matches) {
            matches.forEach(([row, col]) => {
                const cell = document.getElementById('game-board').children[row].children[col];
                cell.textContent = '';
            });
        }

        function fillEmptyCells() {
            for (let col = 0; col < boardSize; col++) {
                let emptyRow = boardSize - 1;
                for (let row = boardSize - 1; row >= 0; row--) {
                    if (board[row][col] !== null) {
                        if (emptyRow !== row) {
                            board[emptyRow][col] = board[row][col];
                            document.getElementById('game-board').children[emptyRow].children[col].textContent = board[row][col];
                            board[row][col] = null;
                            document.getElementById('game-board').children[row].children[col].textContent = '';
                        }
                        emptyRow--;
                    }
                }

                for (let row = emptyRow; row >= 0; row--) {
                    const color = colors[Math.floor(Math.random() * colors.length)];
                    board[row][col] = color;
                    document.getElementById('game-board').children[row].children[col].textContent = color;
                }
            }
        }

        function updateScore(matchCount) {
            score += matchCount * 10;
            document.getElementById('score').textContent = score;
        }

        document.getElementById('new-game').addEventListener('click', () => {
            score = 0;
            document.getElementById('score').textContent = score;
            createBoard();
        });

        createBoard();
    </script>
</body>
</html>
